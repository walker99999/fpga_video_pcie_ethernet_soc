// Generated by IP Generator (Version 2016.4B2 build 17944)



//************************************************************************
//Copyright (c) 2015, PANGO MICROSYSTEMS,INC
//All Rights Reserved
//************************************************************************
`timescale 1ns / 1ns

module tsmac_exam_top 
(
input         SW1,//K16	
// --- Clock Inputs
input         pclk ,
input         tx_clki,
input         rx_clki,
input         txceni ,       
input         rxceni ,       
// --- MII Inputs

// --- MII Management Input
inout         mdio,
output        mdc ,          
// --- MII Receive Inputs
input         rx_dv,

input   [3:0] rxd,            //@IPC show RGMII_ENABLE

// --- MII Transmit Outputs
output        tx_en,

output  [3:0] txd            //@IPC show RGMII_ENABLE 
 
);

//-------------------------------------------------------------------------------------------------



localparam WR_ADDR_WIDTH = 11 ; // @IPC int 11,16

localparam SPEED_TYPE = "10/100/1000M_MAC" ; // @IPC enum 10/100/1000M_MAC,1000M_MAC,10/100M_MAC

localparam INTERFACE = "RGMII" ; // @IPC enum MII/GMII,RGMII

localparam SERDES_MODE = "GE" ; // @IPC enum GE,SGMII

localparam SERDES_MODE_EN = 0 ; // @IPC bool




parameter  TP=1;                   
//--------------------------------------------------------------------------------------------------                
// --- System Transmit Interface Inputs
wire   [7:0] tsmac_tdata   ;
wire         tsmac_tstart  ;    
wire         tsmac_tlast   ;
// --- Host Interface      
wire         presetn       ;    
wire         pselx         ; 
wire         pwrite        ;
wire         penable       ;
wire   [7:0] paddr         ; 
wire  [31:0] pwdata        ;

// --- System Transmit Interface Outputs
wire         tsmac_tpnd    ;    
wire         tsmac_tprt    ;    
wire         tsmac_tpar    ;
wire         tsmac_txcf    ;    
wire         tsmac_tcdr    ;
                           
wire  [7:0]  tsmac_rdata   ;
wire         tsmac_rvalid  ;
wire         tsmac_rlast   ;
wire         speed         ;
wire         mdoen         ;     
wire [17:0]  rd_data       ;
wire         tx_clk        ;
wire         gtx_clk       ;
wire         mdo           ;
wire         rst           ;
wire         clk_ten       ;
wire         clk_ren       ;
wire         pll_lock      ;
//---------------------------------------------------------
wire         data_out_ready;
wire         data_out_valid;
wire [17:0]  data_in       ;
wire         rd_en         ;
wire         wr_en         ;
//---------------------------------------------------------
assign presetn =rst ; 
assign mdi     =mdio;
assign mdio    =(mdoen==1'd1) ?  mdo      : 1'bz      ;
assign tx_clk  =(SPEED_TYPE != "10/100M_MAC") ?  gtx_clk  : tx_clki   ;

assign rst     =(SPEED_TYPE != "10/100M_MAC") ?  ~(pll_lock&SW1):~SW1 ;

assign clk_ten =(SERDES_MODE_EN ==1) ? txceni:1'b1 ; 
assign clk_ren =(SERDES_MODE_EN ==1) ? rxceni:1'b1 ;          
assign tpnd_en =(SPEED_TYPE != "10/100M_MAC") ? tsmac_tpnd:~tsmac_tpnd ;

assign data_in={9'b0,tsmac_rlast,tsmac_rdata};
assign wr_en=tsmac_rvalid&&clk_ren; 
assign data_out_ready=rd_en&clk_ten;


config_reg  #(                      //Config Reg Module
    .SPEED_TYPE(SPEED_TYPE)
)U_config_reg
(
  .pclk        (pclk    ),
  .presetn     (presetn ),  
  .pselx       (pselx   ), 
  .pwrite      (pwrite  ),
  .penable     (penable ),
  .paddr       (paddr   ), 
  .pwdata      (pwdata  ) 
);    

tx_sm #(                            //RX DATA Transform To TX DATA
    .SPEED_TYPE(SPEED_TYPE),
    .INTERFACE(INTERFACE)
)U_tx_sm
(
  .tx_clk         (tx_clk        ),    
  .rst            (rst           ),        
  .clk_ten        (clk_ten       ),   
  .rd_data        (rd_data       ),  
  .tpnd_en        (tpnd_en       ),
  .tsmac_rlast    (tsmac_rlast   ),
  .data_out_valid (data_out_valid),
  .tsmac_tpnd     (tsmac_tpnd    ), 
  .rd_en          (rd_en         ),  
  .tsmac_tdata    (tsmac_tdata   ),
  .tsmac_tstart   (tsmac_tstart  ),
  .tsmac_tlast    (tsmac_tlast   )
);

 prefetch_fifo U_prefetch_fifo     //RX DATA FIFO
(
  .wr_clk         (rx_clki       ), 
  .rd_clk         (tx_clk        ),
  .rst_n          (!rst          ),
                                 
  .data_in_valid  (wr_en         ),
  .data_in        (data_in       ),
  .data_in_ready  (              ),
  
  .data_out_ready (data_out_ready),
  .data_out       (rd_data       ),
  .data_out_valid (data_out_valid)
       
);  

tsmac_phy   U_tsmac_phy             //TS_MAC IP
(
  .tx_clki     (tx_clk ),
  .rx_clki     (rx_clki),
  .tx_rst      (rst),
  .rx_rst      (rst),
        
  .mdi         (mdi),
  .mdc         (mdc),     
  .mdo         (mdo),     
  .mdoen       (mdoen),
  .tsmac_tdata (tsmac_tdata),
  .tsmac_tstart(tsmac_tstart),    
  .tsmac_tlast (tsmac_tlast),
  .tsmac_tcrq  (1'b0),
  .tsmac_cfpt  (16'h0000),
  .tsmac_thdf  (1'b0),
  .rx_dv       (rx_dv),
  .rxd         (rxd),
 
  .presetn     (presetn),  
  .pclk        (pclk),  
  .pselx       (pselx),  
  .pwrite      (pwrite),  
  .penable     (penable),   
  .paddr       (paddr),
  .pwdata      (pwdata),
  .prdata      (prdata),
  .tx_en       (tx_en),
  .txd         (txd),

  .tsmac_tpnd  (tsmac_tpnd),    
  .tsmac_tprt  (tsmac_tprt),    
  .tsmac_tpar  (tsmac_tpar),
  .tsmac_txcf  (tsmac_txcf),    
  .tsmac_tcdr  (tsmac_tcdr),
  .tsmac_rdata (tsmac_rdata),
  .tsmac_rvalid(tsmac_rvalid),  
  .tsmac_rlast (tsmac_rlast),
  .speed       (speed)
);

pll_125 U_pll_125(
    
  .pll_lock (pll_lock),    
  .clkout_0 (gtx_clk),    
  .clkin1   (pclk)
);

endmodule


