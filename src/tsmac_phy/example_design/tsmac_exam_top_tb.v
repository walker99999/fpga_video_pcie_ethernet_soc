// Generated by IP Generator (Version 2016.4B2 build 17944)



//************************************************************************
//Copyright (c) 2015, PANGO MICROSYSTEMS,INC
//All Rights Reserved
//************************************************************************
`timescale 1ns / 1ns
module tsmac_exam_top_tb;
reg           SW1;//K16	s
reg         pclk ;
reg         tx_clki;
reg         rx_clki;
reg         txceni ;
reg         rxceni ;
// --- MII Inputs

// --- MII Management Input
wire         mdio;
wire         mdc ;
// --- MII Receive Inputs
reg         rx_dv;
reg   [7:0] rxd  ;
reg         rx_er;
// --- MII Transmit Outputs
wire        tx_en;
wire  [7:0] txd;
wire        tx_er;

reg [8:0]  period  ;
wire       tx_en_pos;
wire       tx_en_neg;
reg        tx_en_neg_d;

reg [15:0] tx_cnt  ;
reg [ 7:0] exp_data[255:0];
reg [ 7:0] exp_data1[255:0];
reg [ 6:0] data     ;
reg [ 6:0] data1    ;
reg        tx_en_d;
reg        tx_en_d1;
reg [7:0]  exp_frame_tag;
reg [7:0]  TH;
reg [7:0]  cnt;
wire       clk_ten ;
reg        sys_clk;//sample clk
reg        tx_clk1;//sample clk ,twice tx_clki,use for rgmii data sample
wire       tx_clk2;//sample clk
reg        rx_clk1;//sample clk ,twice tx_clki,use for rgmii data sample
wire       rx_clk2;//sample clk
reg        mux    ;//clk choose for rgmii
reg  [15:0] rx_cnt;
reg  [7:0]  rx_cnt_0;
reg  [31:0] crc;
reg  [15:0] length ;
reg  [31:0] reg_crc;
reg         rx_en;

parameter  TP=1;
parameter  PERIOD_HST=20;


localparam WR_ADDR_WIDTH = 11 ; // @IPC int 11,16

localparam SPEED_TYPE = "10/100/1000M_MAC" ; // @IPC enum 10/100/1000M_MAC,1000M_MAC,10/100M_MAC

localparam INTERFACE = "RGMII" ; // @IPC enum MII/GMII,RGMII

localparam SERDES_MODE = "GE" ; // @IPC enum GE,SGMII

localparam SERDES_MODE_EN = 0 ; // @IPC bool

assign txd[7:4] = 4'h0;         //@IPC show RGMII_ENABLE 

//-----------------------------------------------------
// tx state
//-----------------------------------------------------
always #(period/2)     begin tx_clki=~tx_clki;rx_clki=~rx_clki;end
always #(period/4)     begin tx_clk1=~tx_clk1;rx_clk1=~rx_clk1;end
always # 1             begin sys_clk=~sys_clk;end
always #(PERIOD_HST/2) pclk=~pclk;

assign clk_ten = (SERDES_MODE_EN == 1) ? txceni : 1;
assign clk_ren = (SERDES_MODE_EN == 1) ? rxceni : 1;
assign tx_clk2= (mux==1'b1) ? tx_clk1:tx_clki;
assign rx_clk2= (mux==1'b1) ? rx_clk1:rx_clki;
//generate clk_en
always @(posedge tx_clki  or negedge SW1 )
begin 
  if (!SW1)
     cnt <= 8'd0;
  else if (cnt >= TH)
     cnt <= 8'd0;
  else
     cnt <= cnt + 8'd1;
end 

always @(posedge tx_clki  or negedge SW1 )
begin 
  if (!SW1)
     txceni <= 1'd0;
  else if (cnt >= TH)
     txceni <= 1'd1;
  else
     txceni <= 1'd0;
end 

always @(posedge rx_clki  or negedge SW1 )
begin 
  if (!SW1)
     rxceni <= 1'd0;
  else if (cnt >= TH)
     rxceni <= 1'd1;
  else
     rxceni <= 1'd0;
end 

//
GTP_GRS GRS_INST(
    .GRS_N(1'b1)
);

//data number of every frame
always @(posedge tx_clk2 or negedge SW1)
begin 
    if(!SW1)
        tx_cnt<=16'd0;
    else if(clk_ten==1'b1)
    begin
        if(INTERFACE != "RGMII")
        begin
            if(tx_en)
                tx_cnt<=tx_cnt+16'd1;
            else 
                tx_cnt<=16'd0;
        end
        else 
        begin
            if(tx_en==1'b1)
                tx_cnt<=tx_cnt+16'd1;
            else 
                tx_cnt<=16'd0;
        end
    end
end

always @ ( posedge rx_clk2 or negedge SW1 )
begin
    if ( !SW1 )
        rx_cnt  <= #TP 16'h0;
    else if(clk_ren)
    begin
        if(INTERFACE == "RGMII")
        begin
            if(rx_en)
                rx_cnt  <= #TP rx_cnt+16'h1;
            else 
                rx_cnt <= 16'h0;
        end 
        else
        begin 
            if(rx_dv)
                rx_cnt  <= #TP rx_cnt+16'h1;
            else 
                rx_cnt <= 16'h0;
        end 
    end 
end

always @ ( posedge rx_clki or negedge SW1 )
begin
    if ( !SW1 )
      rx_cnt_0  <= #TP 8'h00;
    else if(clk_ren)
    begin
        if(INTERFACE == "RGMII")
        begin
            if(!rx_en)
                rx_cnt_0  <= #TP  rx_cnt_0+16'h1;
            else 
                rx_cnt_0 <= 16'h0;
        end 
        else
        begin 
            if(!rx_dv)
                rx_cnt_0  <= #TP  rx_cnt_0+16'h1;
            else 
                rx_cnt_0 <= 16'h0;
        end 
    end 
end

always @ ( negedge rx_clk2 or negedge SW1 )
begin
    if ( !SW1 )
      rx_en  <= #TP 1'b0;
    else if(clk_ren)
    begin
        if(INTERFACE == "RGMII")
        begin
            if(rx_cnt_0==8'h1e)
                rx_en  <= #TP 1'b1;
            else if(rx_cnt==2*length+16'd16)
                rx_en  <= #TP ~rx_en;
            else ;
        end 
        else
            rx_en  <= #TP 1'b0;
    end
end   	
always @ ( posedge rx_clk2 or negedge SW1 ) 
begin
    if ( !SW1 )
        rx_dv  <= #TP 1'b0;
    else if(clk_ren)
    begin
        if((SERDES_MODE_EN == 1)||((SPEED_TYPE != "10/100M_MAC")&&(INTERFACE == "MII/GMII")))
        begin
            if(rx_cnt_0==8'h1e)
                rx_dv  <= #TP  ~rx_dv;
            else  if(rx_cnt==length+16'd7)
                rx_dv  <= #TP  ~rx_dv;
            else ;
        end 
        else if(SPEED_TYPE == "10/100M_MAC")
        begin
            if(rx_cnt_0==8'h1e)
                rx_dv  <= #TP 1'b1;
            else  if(rx_cnt==2*length+16'd15)
                rx_dv  <= #TP ~rx_dv;
            else ;
        end 
        else if(INTERFACE == "RGMII")
        begin
            if((rx_en==1'b1)&&(rx_cnt<=2*length+16'd14))
            //if(rx_en)
                rx_dv  <= #TP 1'b1;
            else 
                rx_dv  <= #TP 1'b0;
        end 
    end 
end

reg [10:0] i;
always @ ( posedge rx_clk2 or negedge SW1 )
begin
    if ( !SW1 )
    begin 
        rxd <= #TP 8'h00;
        crc <= 32'hFFFF_FFFF;
    end 
    else if(clk_ren)
    begin
        if((SERDES_MODE_EN == 1)||((SPEED_TYPE != "10/100M_MAC")&&(INTERFACE == "MII/GMII")))
        begin 
            if(rx_cnt_0==8'h1e)
                rxd   <= #TP 8'h55;
            else if((rx_cnt<=16'd5)&&(rx_dv==1'b1))
                rxd   <= #TP 8'h55;
            else if((rx_cnt<=16'd6)&&(rx_dv==1'b1))
                rxd   <= #TP 8'hD5;
            else if((rx_cnt<=length+16'd6)&&(rx_dv==1'b1))
                rxd   <= #TP exp_data[rx_cnt-16'd7];
            else
                rxd   <= #TP 8'h00;
        end
        else if(SPEED_TYPE == "10/100M_MAC")
        begin
            if(rx_cnt_0==8'h1e)
                rxd   <= #TP 8'h05;
            else if((rx_cnt<=16'd13)&&(rx_dv==1'b1))
                rxd   <= #TP 8'h05;
            else if((rx_cnt<=16'd14)&&(rx_dv==1'b1))
                rxd   <= #TP 8'h0D;
            else if((rx_cnt<=2*length+16'd14)&&(rx_dv==1'b1))
                rxd   <= #TP exp_data1[rx_cnt-16'd15];
            else
                rxd   <= #TP 8'h00;
        end
        else if(INTERFACE == "RGMII")
        begin 
            if((rx_cnt<=16'd14)&&(rx_en==1'b1))
                rxd   <= #TP 8'h05;
            else if((rx_cnt<=16'd15)&&(rx_en==1'b1))
                rxd   <= #TP 8'h0D;
            else if((rx_cnt<=2*length+16'd15)&&(rx_en==1'b1))
                rxd   <= #TP exp_data1[rx_cnt-16'd16];
            else
                rxd   <= #TP 8'h00;
        end
    end 
end 

//reg [7:0] frame_cnt;
//verify the value of txd with the expect value
always @(posedge tx_clk2  )
begin
    if((clk_ten==1'b1)&&(tx_en==1'b1))
    begin
        if((SPEED_TYPE != "10/100M_MAC")&&(INTERFACE != "RGMII")||(SERDES_MODE_EN == 1))
        begin 
            if(tx_cnt<=16'd6)
            begin
                if(txd != 8'h55 )
                begin 
                    $display("\n preamble  error:txd=%h,tx_cnt=%h",txd,tx_cnt);
                    $finish;
                end 
            end
            else if(tx_cnt<=16'd7)
            begin
                if(txd !=8'hD5)
                begin 
                    $display("\n preamble  error:txd=%h,tx_cnt=%h",txd,tx_cnt);
                    $finish;
                end 
            end 
            else 
            begin
                if (exp_data[tx_cnt-8]!=txd)
                begin
                    $display("\n tx'%d data error,expect data:%h,real data:%h",tx_cnt,exp_data[tx_cnt-8],txd);
                    $finish;
                end 
            end
        end 
	      else if((SPEED_TYPE == "10/100M_MAC")||(INTERFACE == "RGMII"))
        begin
	          if(tx_cnt<=16'd14)
            begin
                if(txd!=8'h05)
                begin 
                    $display("\n preamble  error:txd=%h,tx_cnt=%h",txd,tx_cnt);
                    //$finish;
                end 
            end
            else if(tx_cnt<=16'd15)
            begin
                if(txd!=8'h0D)
                begin 
                    $display("\n preamble  error:txd=%h,tx_cnt=%h",txd,tx_cnt);
                    $finish;
                end 
            end
            else 
            begin
                 if (exp_data1[tx_cnt-16]!=txd)
                 begin
                     $display("\n tx'%d data error,expect data:%h,real data:%h",tx_cnt,exp_data1[tx_cnt-16],txd);
                     $finish;
                 end 
            end 
        end 
    end 
end

always @(posedge sys_clk or negedge SW1)
begin
    if(!SW1)
      tx_en_d<=1'b0;
    else
      tx_en_d<=tx_en; 
end

always @(posedge sys_clk or negedge SW1)
begin
    if(!SW1)
      tx_en_d1<=1'b0;
    else
      tx_en_d1<=tx_en_d;
end

//posedge of tx_en
assign tx_en_pos=(!tx_en_d1)&tx_en_d ;

//negedge of tx_en
assign tx_en_neg=tx_en_d1&(!tx_en_d);

always @(posedge tx_clk2 or negedge SW1)
begin
if(!SW1)
    tx_en_neg_d<=1'd0;
else 
    tx_en_neg_d<=tx_en_neg;
end


initial 
begin
     if(SERDES_MODE_EN == 1)
        if(SERDES_MODE == "GE")
           test1_1;
        else 
           test1_2;
     else 

        if((SPEED_TYPE == "10/100/1000M_MAC")&(INTERFACE=="MII/GMII"))

           test1_3;

        else if((SPEED_TYPE == "10/100M_MAC")&(INTERFACE=="MII/GMII"))

           test1_4;
        else
            if(INTERFACE=="MII/GMII")
              test1_1;
            else
              test1_5;
end 

tsmac_exam_top U_tsmac_exam_top
(
 .SW1    (SW1    ),
 .pclk (pclk ),
 .tx_clki(tx_clki),
 .rx_clki(rx_clki),
 .txceni (clk_ten ),
 .rxceni (clk_ren ),

 .mdio   (mdio   ),
 .mdc    (mdc    ), 

 .rxd    (rxd[3:0]),         //@IPC show RGMII_ENABLE
 .txd    (txd[3:0]),         //@IPC show RGMII_ENABLE
        
 .rx_dv  (rx_dv  ),
 .tx_en  (tx_en  )
 
);

//--------------------------------
task test1_1;
begin
//1000M or GE MODE
$display("\n  test1_1 tx_clki=125M" );
$display("SERDES_MODE_EN:%b,SERDES_MODE:%s,SPEED_TYPE:%s,INTERFACE:%s\n",SERDES_MODE_EN,SERDES_MODE,SPEED_TYPE,INTERFACE);
//--------------------------------
//initial
  init;
  length=16'd100;
  exp_value(length);
//--------------------------------
//set frequency of tx_clki   1000M
  clk_gen(2'b10);
  #8            SW1=1'b0;
  #16           SW1=1'b1;
//--------------------------------
  #15000;
  $display("\n Simulation Success" );
  $finish;
end
endtask


task test1_2;
begin
//SGMII MODE 
$display("\n  test1_2 tx_clki=25M,2.5M" );
//--------------------------------
//initial
  init;
  length=16'd100;
  exp_value(length);
//--------------------------------
//set frequency of tx_clki   1000M
   clk_gen(2'b10);
//---------------------------------
//clk_en 100M 
$display("\n SGMII mode,clk_en=25M" );

  clk_en_gen(2'b01);
  #2500         SW1=1'b0;
  #80           SW1=1'b1;
//--------------------------------
  #60000;
//---------------------------------
//clk_en 10M 
$display("\n SGMII mode,clk_en=2.5M" );
  clk_en_gen(2'b00);
  #800            SW1=1'b0;
  #1600           SW1=1'b1;

//--------------------------------
//configure register
  #350000;
  $display("\n Simulation Success" );
  $finish;
end
endtask

task test1_3;
begin
//10/100/1000M,clk=125M for example
$display("\n  test1_3 tx_clki=125M,25M,2.5M" );
$display("SERDES_MODE_EN:%b,SERDES_MODE:%s,SPEED_TYPE:%s,INTERFACE:%s\n",SERDES_MODE_EN,SERDES_MODE,SPEED_TYPE,INTERFACE);
//--------------------------------
//initial
  init;
  length=16'd100;
  exp_value(length);
//--------------------------------
//set frequency of tx_clki   1000M
  clk_gen(2'b10);
  #8            SW1=1'b0;
  #16            SW1=1'b1;
  #20000;
 $display("\n Simulation Success" );
 $finish;
end
endtask

task test1_4;
begin
//10/100M mode
$display("\n  test1_4 tx_clki=25M,2.5M" );
$display("SERDES_MODE_EN:%b,SERDES_MODE:%s,SPEED_TYPE:%s,INTERFACE:%s\n",SERDES_MODE_EN,SERDES_MODE,SPEED_TYPE,INTERFACE);
//--------------------------------
//initial
  init;
  length=16'd100;
  exp_value(length);
  exp_value1(length);
$display("\n 10/100M_MAC mode,clk=25M" );
//----------------------------------
//set frequency of tx_clki   100M
  clk_gen(2'b01);
  #40            SW1=1'b0;
  #80            SW1=1'b1;
 #70000;
//----------------------------------
//set frequency of tx_clki   10M
$display("\n 10/100M_MAC mode,clk=2.5M" );
  clk_gen(2'b00);
  #400            SW1=1'b0;
  #800            SW1=1'b1;
 #800000;
 $display("\n Simulation Success" );
 $finish;
end
endtask

task test1_5;
begin
//10/100/1000M,clk=125M for example
$display("\n  test1_5 tx_clki=125M,25M,2.5M" );
$display("SPEED_TYPE:%s,INTERFACE:%s\n",SPEED_TYPE,INTERFACE);
//--------------------------------
//initial
  init;
  length=16'd100;
  exp_value(length);
  exp_value1(length);
  mux=1'b1;
//--------------------------------
//set frequency of tx_clki   1000M
$display("\n 1000M_MAC mode,clk=125M,RGMII" );
  clk_gen(2'b10);
  #8            SW1=1'b0;
  #16           SW1=1'b1;
  #20000;
 $display("\n Simulation Success" );
 $finish;
end
endtask

task init;
begin
     SW1=1'b1;pclk=1'b0;rx_clki=1'b0;tx_clki=1'b0;

     rx_er=1'b0;rx_dv=1'b0;
     rxd=8'h00;TH=8'd0;
     period=9'd40;data=7'd0;data1=7'd0;
     tx_cnt=16'd0; mux=1'b0; tx_clk1=1'b0;rx_clk1=1'b0;sys_clk=1'b0;
end
endtask

//clock generater 
task clk_gen;
input [1:0] speed;
begin
     if(speed==2'b00)
        period=9'd400;
     else if(speed==2'b01)
        period=9'd40;
     else if(speed==2'b10)
        period=9'd8;
end
endtask
//
task clk_en_gen;
input [1:0] serdes;
begin
     if(serdes==2'b10)
        TH=8'd0;
     else if(serdes==2'b01)
        TH=8'd4;
     else if(serdes==2'b00)
        TH=8'd49;
end
endtask


//expect value in GMII mode 
task exp_value;
input [15:0] totlen;
reg   [31:0] crc_out;
reg   [15:0] flength;
integer i,j;
begin
    flength=totlen-16'd18;
    for(i=0;i<totlen-4;i=i+1)
    begin 
        if(i<=5)
           exp_data[i]=8'hff;
        else if(i<=6)
           exp_data[i]=8'h50;
        else if(i<=7)
           exp_data[i]=8'h51;
        else if(i<=8)
           exp_data[i]=8'h52;
        else if(i<=9)
           exp_data[i]=8'h53;
        else if(i<=10)
           exp_data[i]=8'h54;
        else if(i<=11)
           exp_data[i]=8'h55;
        else if(i<=12)
           exp_data[i]=flength[15:8];
        else if(i<=13)
           exp_data[i]=flength[7:0];
        else 
        begin
           exp_data[i]={^data,data};
           data =  data+7'h1;
        end
    end 
    reg_crc = 32'hFFFF_FFFF;
    for ( j=0; j < totlen - 4; j=j+1 )
    begin
      crc_gen( reg_crc, exp_data[j], crc_out );
      reg_crc = crc_out;
    end 
    reg_crc = ~reg_crc;
    reg_crc = {reg_crc[24], reg_crc[25], reg_crc[26], reg_crc[27],
               reg_crc[28], reg_crc[29], reg_crc[30], reg_crc[31],
               reg_crc[16], reg_crc[17], reg_crc[18], reg_crc[19],
               reg_crc[20], reg_crc[21], reg_crc[22], reg_crc[23],
               reg_crc[8],  reg_crc[9],  reg_crc[10], reg_crc[11],
               reg_crc[12], reg_crc[13], reg_crc[14], reg_crc[15],
               reg_crc[0],  reg_crc[1],  reg_crc[2],  reg_crc[3],
               reg_crc[4],  reg_crc[5],  reg_crc[6],  reg_crc[7]};
    j = totlen - 4;
    exp_data[j] = reg_crc[31:24];
    j=j+1;
    exp_data[j] = reg_crc[23:16];
    j=j+1;
    exp_data[j] = reg_crc[15:8];
    j=j+1;
    exp_data[j] = reg_crc[7:0];
    j=j+1;
end
endtask

//expect value in MII mode or RGMII mode
task exp_value1;
input [15:0] totlen;
reg   [31:0] crc_out;
reg   [15:0] flength;
integer i,j;
begin
     flength= totlen-16'd18;
     for(i=0;i<totlen*2-8;i=i+1)
     begin 
         if(i<=11)
            exp_data1[i]=8'h0f;
         else if(i<=12)
            exp_data1[i]=8'h00;
         else if(i<=13)
            exp_data1[i]=8'h05;
         else if(i<=14)
            exp_data1[i]=8'h01;
         else if(i<=15)
            exp_data1[i]=8'h05;
         else if(i<=16)
            exp_data1[i]=8'h02;
         else if(i<=17)
            exp_data1[i]=8'h05;
         else if(i<=18)
            exp_data1[i]=8'h03;
         else if(i<=19)
            exp_data1[i]=8'h05;
         else if(i<=20)
            exp_data1[i]=8'h04;
         else if(i<=21)
            exp_data1[i]=8'h05;
         else if(i<=22)
            exp_data1[i]=8'h05;
         else if(i<=23)
            exp_data1[i]=8'h05;
         else if(i<=24)
            exp_data1[i]={4'h0,flength[11:8]};
         else if(i<=25)
            exp_data1[i]={4'h0,flength[15:12]};
         else if(i<=26)
            exp_data1[i]={4'h0,flength[3:0]};
         else if(i<=27)
            exp_data1[i]={4'h0,flength[7:4]};
         else 
         begin
            if(i%2==0)
                exp_data1[i]={4'h0,data1[3:0]};
            else
            begin 
                exp_data1[i]={4'h0,^data1,data1[6:4]};
                data1 =  data1+7'h1;
            end 
         end
     end 
     j = 2*totlen - 8;
     exp_data1[j] = reg_crc[27:24];
     j=j+1;
     exp_data1[j] = reg_crc[31:28] ;
     j=j+1;
     exp_data1[j] = reg_crc[19:16];
     j=j+1;
     exp_data1[j] = reg_crc[23:20];
     j=j+1;
     exp_data1[j] = reg_crc[11:8];
     j=j+1;
     exp_data1[j] = reg_crc[15:12];
     j=j+1;
     exp_data1[j] = reg_crc[3:0];
     j=j+1;
     exp_data1[j] = reg_crc[7:4];
     j=j+1;
end
endtask

task crc_gen;

input    [31:0] crc;
input     [7:0] d;

output   [31:0] o_crc;

reg      [31:0] o_crc;

begin
  o_crc[31] = crc[29]^d[2] ^ crc[23];
  o_crc[30] = crc[31]^d[0] ^ crc[28]^d[3] ^ crc[22];
  o_crc[29] = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[27]^d[4] ^ crc[21];
  o_crc[28] = crc[30]^d[1] ^ crc[29]^d[2] ^ crc[26]^d[5] ^ crc[20];
  o_crc[27] = crc[31]^d[0] ^ crc[29]^d[2] ^ crc[28]^d[3] ^ crc[25]^d[6] ^ crc[19];
  o_crc[26] = crc[30]^d[1] ^ crc[28]^d[3] ^ crc[27]^d[4] ^ crc[24]^d[7] ^ crc[18];
  o_crc[25] = crc[27]^d[4] ^ crc[26]^d[5] ^ crc[17];
  o_crc[24] = crc[31]^d[0] ^ crc[26]^d[5] ^ crc[25]^d[6] ^ crc[16];
  o_crc[23] = crc[30]^d[1] ^ crc[25]^d[6] ^ crc[24]^d[7] ^ crc[15];
  o_crc[22] = crc[24]^d[7] ^ crc[14];
  o_crc[21] = crc[29]^d[2] ^ crc[13];
  o_crc[20] = crc[28]^d[3] ^ crc[12];
  o_crc[19] = crc[31]^d[0] ^ crc[27]^d[4] ^ crc[11];
  o_crc[18] = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[26]^d[5] ^ crc[10];
  o_crc[17] = crc[30]^d[1] ^ crc[29]^d[2] ^ crc[25]^d[6] ^ crc[9];
  o_crc[16] = crc[29]^d[2] ^ crc[28]^d[3] ^ crc[24]^d[7] ^ crc[8];
  o_crc[15] = crc[31]^d[0] ^ crc[29]^d[2] ^ crc[28]^d[3] ^ crc[27]^d[4] ^ crc[7];
  o_crc[14] = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[28]^d[3] ^ crc[27]^d[4] ^ crc[26]^d[5] ^ crc[6];
  o_crc[13] = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[29]^d[2] ^ crc[27]^d[4] ^ crc[26]^d[5] ^ crc[25]^d[6] ^ crc[5];
  o_crc[12] = crc[30]^d[1] ^ crc[29]^d[2] ^ crc[28]^d[3] ^ crc[26]^d[5] ^ crc[25]^d[6] ^ crc[24]^d[7] ^ crc[4];
  o_crc[11] = crc[28]^d[3] ^ crc[27]^d[4] ^ crc[25]^d[6] ^ crc[24]^d[7] ^ crc[3];
  o_crc[10] = crc[29]^d[2] ^ crc[27]^d[4] ^ crc[26]^d[5] ^ crc[24]^d[7] ^ crc[2];
  o_crc[9]  = crc[29]^d[2] ^ crc[28]^d[3] ^ crc[26]^d[5] ^ crc[25]^d[6] ^ crc[1];
  o_crc[8]  = crc[28]^d[3] ^ crc[27]^d[4] ^ crc[25]^d[6] ^ crc[24]^d[7] ^ crc[0];
  o_crc[7]  = crc[31]^d[0] ^ crc[29]^d[2] ^ crc[27]^d[4] ^ crc[26]^d[5] ^ crc[24]^d[7];
  o_crc[6]  = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[29]^d[2] ^ crc[28]^d[3] ^ crc[26]^d[5] ^ crc[25]^d[6];
  o_crc[5]  = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[29]^d[2] ^ crc[28]^d[3] ^ crc[27]^d[4] ^ crc[25]^d[6] ^ crc[24]^d[7];
  o_crc[4]  = crc[30]^d[1] ^ crc[28]^d[3] ^ crc[27]^d[4] ^ crc[26]^d[5] ^ crc[24]^d[7];
  o_crc[3]  = crc[31]^d[0] ^ crc[27]^d[4] ^ crc[26]^d[5] ^ crc[25]^d[6];
  o_crc[2]  = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[26]^d[5] ^ crc[25]^d[6] ^ crc[24]^d[7];
  o_crc[1]  = crc[31]^d[0] ^ crc[30]^d[1] ^ crc[25]^d[6] ^ crc[24]^d[7];
  o_crc[0]  = crc[30]^d[1] ^ crc[24]^d[7];
end
endtask


endmodule
